CCS PCM C Compiler, Version 5.101, 43599               26-May-22 23:14

               Filename:   D:\PICC\DTUD.lst

               ROM used:   972 words (12%)
                           Largest free fragment is 2048
               RAM used:   32 (9%) at main() level
                           49 (13%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2D9
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #include <16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
*
0056:  DATA 0C,00
0057:  DATA F4,37
0058:  DATA 63,32
0059:  DATA 6F,10
005A:  DATA 25,36
005B:  DATA 75,00
*
0105:  MOVLW  10
0106:  MOVWF  3D
0107:  CLRF   77
0108:  CLRF   7A
0109:  RRF    3A,F
010A:  RRF    39,F
010B:  BTFSS  03.0
010C:  GOTO   113
010D:  MOVF   3B,W
010E:  ADDWF  77,F
010F:  BTFSC  03.0
0110:  INCF   7A,F
0111:  MOVF   3C,W
0112:  ADDWF  7A,F
0113:  RRF    7A,F
0114:  RRF    77,F
0115:  RRF    79,F
0116:  RRF    78,F
0117:  DECFSZ 3D,F
0118:  GOTO   109
0119:  RETURN
*
0160:  CLRF   78
0161:  CLRF   79
0162:  CLRF   77
0163:  CLRF   7A
0164:  MOVF   3E,W
0165:  BTFSS  03.2
0166:  GOTO   16A
0167:  MOVF   3D,W
0168:  BTFSC  03.2
0169:  GOTO   184
016A:  MOVLW  10
016B:  MOVWF  3F
016C:  BCF    03.0
016D:  RLF    3B,F
016E:  RLF    3C,F
016F:  RLF    77,F
0170:  RLF    7A,F
0171:  MOVF   3E,W
0172:  SUBWF  7A,W
0173:  BTFSS  03.2
0174:  GOTO   177
0175:  MOVF   3D,W
0176:  SUBWF  77,W
0177:  BTFSS  03.0
0178:  GOTO   180
0179:  MOVF   3D,W
017A:  SUBWF  77,F
017B:  BTFSS  03.0
017C:  DECF   7A,F
017D:  MOVF   3E,W
017E:  SUBWF  7A,F
017F:  BSF    03.0
0180:  RLF    78,F
0181:  RLF    79,F
0182:  DECFSZ 3F,F
0183:  GOTO   16C
0184:  BCF    0A.3
0185:  BCF    0A.4
0186:  GOTO   395 (RETURN)
*
01C5:  MOVF   0B,W
01C6:  MOVWF  39
01C7:  BCF    0B.7
01C8:  BSF    03.5
01C9:  BSF    03.6
01CA:  BSF    0C.7
01CB:  BSF    0C.0
01CC:  NOP
01CD:  NOP
01CE:  BCF    03.5
01CF:  BCF    03.6
01D0:  BTFSC  39.7
01D1:  BSF    0B.7
01D2:  BSF    03.6
01D3:  MOVF   0C,W
01D4:  ANDLW  7F
01D5:  BTFSC  03.2
01D6:  GOTO   219
01D7:  BCF    03.6
01D8:  MOVWF  39
01D9:  BSF    03.6
01DA:  MOVF   0D,W
01DB:  BCF    03.6
01DC:  MOVWF  3A
01DD:  BSF    03.6
01DE:  MOVF   0F,W
01DF:  BCF    03.6
01E0:  MOVWF  3B
01E1:  MOVF   39,W
01E2:  MOVWF  42
01E3:  CALL   199
01E4:  MOVF   3A,W
01E5:  BSF    03.6
01E6:  MOVWF  0D
01E7:  BCF    03.6
01E8:  MOVF   3B,W
01E9:  BSF    03.6
01EA:  MOVWF  0F
01EB:  BCF    03.6
01EC:  MOVF   0B,W
01ED:  MOVWF  3C
01EE:  BCF    0B.7
01EF:  BSF    03.5
01F0:  BSF    03.6
01F1:  BSF    0C.7
01F2:  BSF    0C.0
01F3:  NOP
01F4:  NOP
01F5:  BCF    03.5
01F6:  BCF    03.6
01F7:  BTFSC  3C.7
01F8:  BSF    0B.7
01F9:  BSF    03.6
01FA:  RLF    0C,W
01FB:  RLF    0E,W
01FC:  ANDLW  7F
01FD:  BTFSC  03.2
01FE:  GOTO   219
01FF:  BCF    03.6
0200:  MOVWF  39
0201:  BSF    03.6
0202:  MOVF   0D,W
0203:  BCF    03.6
0204:  MOVWF  3A
0205:  BSF    03.6
0206:  MOVF   0F,W
0207:  BCF    03.6
0208:  MOVWF  3B
0209:  MOVF   39,W
020A:  MOVWF  42
020B:  CALL   199
020C:  MOVF   3A,W
020D:  BSF    03.6
020E:  MOVWF  0D
020F:  BCF    03.6
0210:  MOVF   3B,W
0211:  BSF    03.6
0212:  MOVWF  0F
0213:  INCF   0D,F
0214:  BTFSC  03.2
0215:  INCF   0F,F
0216:  BCF    03.6
0217:  GOTO   1C5
0218:  BSF    03.6
0219:  BCF    03.6
021A:  BCF    0A.3
021B:  BCF    0A.4
021C:  GOTO   3A0 (RETURN)
021D:  MOVF   0B,W
021E:  MOVWF  3A
021F:  BCF    0B.7
0220:  BSF    03.5
0221:  BSF    03.6
0222:  BSF    0C.7
0223:  BSF    0C.0
0224:  NOP
0225:  NOP
0226:  BCF    03.5
0227:  BCF    03.6
0228:  BTFSC  3A.7
0229:  BSF    0B.7
022A:  BTFSC  03.0
022B:  GOTO   254
022C:  BSF    03.6
022D:  MOVF   0C,W
022E:  ANDLW  7F
022F:  BCF    03.6
0230:  MOVWF  3A
0231:  BSF    03.6
0232:  MOVF   0D,W
0233:  BCF    03.6
0234:  MOVWF  3B
0235:  BSF    03.6
0236:  MOVF   0F,W
0237:  BCF    03.6
0238:  MOVWF  3C
0239:  MOVF   3A,W
023A:  MOVWF  42
023B:  CALL   199
023C:  MOVF   3B,W
023D:  BSF    03.6
023E:  MOVWF  0D
023F:  BCF    03.6
0240:  MOVF   3C,W
0241:  BSF    03.6
0242:  MOVWF  0F
0243:  BCF    03.6
0244:  MOVF   0B,W
0245:  MOVWF  3D
0246:  BCF    0B.7
0247:  BSF    03.5
0248:  BSF    03.6
0249:  BSF    0C.7
024A:  BSF    0C.0
024B:  NOP
024C:  NOP
024D:  BCF    03.5
024E:  BCF    03.6
024F:  BTFSC  3D.7
0250:  BSF    0B.7
0251:  DECFSZ 39,F
0252:  GOTO   254
0253:  GOTO   273
0254:  BSF    03.6
0255:  RLF    0C,W
0256:  RLF    0E,W
0257:  ANDLW  7F
0258:  BCF    03.6
0259:  MOVWF  3A
025A:  BSF    03.6
025B:  MOVF   0D,W
025C:  BCF    03.6
025D:  MOVWF  3B
025E:  BSF    03.6
025F:  MOVF   0F,W
0260:  BCF    03.6
0261:  MOVWF  3C
0262:  MOVF   3A,W
0263:  MOVWF  42
0264:  CALL   199
0265:  MOVF   3B,W
0266:  BSF    03.6
0267:  MOVWF  0D
0268:  BCF    03.6
0269:  MOVF   3C,W
026A:  BSF    03.6
026B:  MOVWF  0F
026C:  INCF   0D,F
026D:  BTFSC  03.2
026E:  INCF   0F,F
026F:  BCF    03.0
0270:  BCF    03.6
0271:  DECFSZ 39,F
0272:  GOTO   21D
0273:  BCF    0A.3
0274:  BCF    0A.4
0275:  GOTO   3AF (RETURN)
0276:  CLRF   41
0277:  MOVF   04,W
0278:  MOVWF  40
0279:  BCF    41.0
027A:  BTFSC  03.7
027B:  BSF    41.0
027C:  SWAPF  3A,W
027D:  IORLW  F0
027E:  MOVWF  3C
027F:  ADDWF  3C,F
0280:  ADDLW  E2
0281:  MOVWF  3D
0282:  ADDLW  32
0283:  MOVWF  3F
0284:  MOVF   3A,W
0285:  ANDLW  0F
0286:  ADDWF  3D,F
0287:  ADDWF  3D,F
0288:  ADDWF  3F,F
0289:  ADDLW  E9
028A:  MOVWF  3E
028B:  ADDWF  3E,F
028C:  ADDWF  3E,F
028D:  SWAPF  39,W
028E:  ANDLW  0F
028F:  ADDWF  3E,F
0290:  ADDWF  3F,F
0291:  RLF    3E,F
0292:  RLF    3F,F
0293:  COMF   3F,F
0294:  RLF    3F,F
0295:  MOVF   39,W
0296:  ANDLW  0F
0297:  ADDWF  3F,F
0298:  RLF    3C,F
0299:  MOVLW  07
029A:  MOVWF  3B
029B:  MOVLW  0A
029C:  ADDWF  3F,F
029D:  DECF   3E,F
029E:  BTFSS  03.0
029F:  GOTO   29C
02A0:  ADDWF  3E,F
02A1:  DECF   3D,F
02A2:  BTFSS  03.0
02A3:  GOTO   2A0
02A4:  ADDWF  3D,F
02A5:  DECF   3C,F
02A6:  BTFSS  03.0
02A7:  GOTO   2A4
02A8:  ADDWF  3C,F
02A9:  DECF   3B,F
02AA:  BTFSS  03.0
02AB:  GOTO   2A8
02AC:  MOVLW  3B
02AD:  MOVWF  04
02AE:  BCF    03.7
02AF:  MOVLW  07
02B0:  ANDWF  40,W
02B1:  BCF    40.6
02B2:  ADDWF  04,F
02B3:  MOVLW  3F
02B4:  SUBWF  04,W
02B5:  BTFSC  03.2
02B6:  BSF    40.6
02B7:  MOVF   00,W
02B8:  MOVWF  77
02B9:  BTFSS  03.2
02BA:  GOTO   2C3
02BB:  BTFSC  40.6
02BC:  GOTO   2C3
02BD:  BTFSC  40.4
02BE:  GOTO   2D5
02BF:  BTFSC  40.3
02C0:  GOTO   2C3
02C1:  MOVLW  20
02C2:  GOTO   2C6
02C3:  BSF    40.3
02C4:  BCF    40.4
02C5:  MOVLW  30
02C6:  ADDWF  77,F
02C7:  CLRF   3A
02C8:  MOVF   04,W
02C9:  MOVWF  39
02CA:  BCF    3A.0
02CB:  BTFSC  03.7
02CC:  BSF    3A.0
02CD:  MOVF   77,W
02CE:  MOVWF  42
02CF:  CALL   199
02D0:  MOVF   39,W
02D1:  MOVWF  04
02D2:  BCF    03.7
02D3:  BTFSC  3A.0
02D4:  BSF    03.7
02D5:  INCF   04,F
02D6:  BTFSS  40.6
02D7:  GOTO   2B3
02D8:  RETURN
.................... 
.................... #list
.................... 
.................... #use delay(clock=20M)
*
005C:  MOVLW  43
005D:  MOVWF  04
005E:  BCF    03.7
005F:  MOVF   00,W
0060:  BTFSC  03.2
0061:  GOTO   06F
0062:  MOVLW  06
0063:  MOVWF  78
0064:  CLRF   77
0065:  DECFSZ 77,F
0066:  GOTO   065
0067:  DECFSZ 78,F
0068:  GOTO   064
0069:  MOVLW  7B
006A:  MOVWF  77
006B:  DECFSZ 77,F
006C:  GOTO   06B
006D:  DECFSZ 00,F
006E:  GOTO   062
006F:  RETURN
.................... #define UP    PIN_B0
.................... #define DOWN    PIN_B1
.................... #define START    PIN_B2
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
008B:  MOVLW  0F
008C:  BSF    03.5
008D:  ANDWF  08,W
008E:  IORLW  F0
008F:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0090:  BCF    03.5
0091:  BSF    08.2
....................    delay_cycles(1);
0092:  NOP
....................    lcd_output_enable(1);
0093:  BSF    08.0
....................    delay_cycles(1);
0094:  NOP
....................    high = lcd_read_nibble();
0095:  CALL   07F
0096:  MOVF   78,W
0097:  MOVWF  4A
....................       
....................    lcd_output_enable(0);
0098:  BCF    08.0
....................    delay_cycles(1);
0099:  NOP
....................    lcd_output_enable(1);
009A:  BSF    08.0
....................    delay_us(1);
009B:  GOTO   09C
009C:  GOTO   09D
009D:  NOP
....................    low = lcd_read_nibble();
009E:  CALL   07F
009F:  MOVF   78,W
00A0:  MOVWF  49
....................       
....................    lcd_output_enable(0);
00A1:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00A2:  MOVLW  0F
00A3:  BSF    03.5
00A4:  ANDWF  08,W
00A5:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00A6:  BCF    03.5
00A7:  SWAPF  4A,W
00A8:  MOVWF  77
00A9:  MOVLW  F0
00AA:  ANDWF  77,F
00AB:  MOVF   77,W
00AC:  IORWF  49,W
00AD:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
007F:  MOVF   08,W
0080:  MOVWF  77
0081:  SWAPF  08,W
0082:  ANDLW  0F
0083:  MOVWF  78
....................   #endif
0084:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0070:  SWAPF  4A,W
0071:  ANDLW  F0
0072:  MOVWF  77
0073:  MOVLW  0F
0074:  ANDWF  08,W
0075:  IORWF  77,W
0076:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0077:  NOP
....................    lcd_output_enable(1);
0078:  BSF    08.0
....................    delay_us(2);
0079:  MOVLW  03
007A:  MOVWF  77
007B:  DECFSZ 77,F
007C:  GOTO   07B
....................    lcd_output_enable(0);
007D:  BCF    08.0
007E:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0085:  BSF    03.5
0086:  BCF    08.0
....................    lcd_rs_tris();
0087:  BCF    08.1
....................    lcd_rw_tris();
0088:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0089:  BCF    03.5
008A:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00AE:  MOVF   78,W
00AF:  MOVWF  49
00B0:  BTFSC  49.7
00B1:  GOTO   08B
....................    lcd_output_rs(address);
00B2:  BTFSS  47.0
00B3:  BCF    08.1
00B4:  BTFSC  47.0
00B5:  BSF    08.1
....................    delay_cycles(1);
00B6:  NOP
....................    lcd_output_rw(0);
00B7:  BCF    08.2
....................    delay_cycles(1);
00B8:  NOP
....................    lcd_output_enable(0);
00B9:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
00BA:  SWAPF  48,W
00BB:  MOVWF  49
00BC:  MOVLW  0F
00BD:  ANDWF  49,F
00BE:  MOVF   49,W
00BF:  MOVWF  4A
00C0:  CALL   070
....................    lcd_send_nibble(n & 0xf);
00C1:  MOVF   48,W
00C2:  ANDLW  0F
00C3:  MOVWF  49
00C4:  MOVWF  4A
00C5:  CALL   070
00C6:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00C7:  MOVLW  28
00C8:  MOVWF  3A
00C9:  MOVLW  0C
00CA:  MOVWF  3B
00CB:  MOVLW  01
00CC:  MOVWF  3C
00CD:  MOVLW  06
00CE:  MOVWF  3D
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00CF:  BCF    08.0
....................    lcd_output_rs(0);
00D0:  BCF    08.1
....................    lcd_output_rw(0);
00D1:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00D2:  MOVLW  0F
00D3:  BSF    03.5
00D4:  ANDWF  08,W
00D5:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
00D6:  BCF    08.0
....................    lcd_rs_tris();
00D7:  BCF    08.1
....................    lcd_rw_tris();
00D8:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
00D9:  MOVLW  0F
00DA:  BCF    03.5
00DB:  MOVWF  43
00DC:  CALL   05C
....................    for(i=1;i<=3;++i)
00DD:  MOVLW  01
00DE:  MOVWF  39
00DF:  MOVF   39,W
00E0:  SUBLW  03
00E1:  BTFSS  03.0
00E2:  GOTO   0EB
....................    {
....................        lcd_send_nibble(3);
00E3:  MOVLW  03
00E4:  MOVWF  4A
00E5:  CALL   070
....................        delay_ms(5);
00E6:  MOVLW  05
00E7:  MOVWF  43
00E8:  CALL   05C
00E9:  INCF   39,F
00EA:  GOTO   0DF
....................    }
....................    
....................    lcd_send_nibble(2);
00EB:  MOVLW  02
00EC:  MOVWF  4A
00ED:  CALL   070
....................    delay_ms(5);
00EE:  MOVLW  05
00EF:  MOVWF  43
00F0:  CALL   05C
....................    for(i=0;i<=3;++i)
00F1:  CLRF   39
00F2:  MOVF   39,W
00F3:  SUBLW  03
00F4:  BTFSS  03.0
00F5:  GOTO   102
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00F6:  MOVLW  3A
00F7:  ADDWF  39,W
00F8:  MOVWF  04
00F9:  BCF    03.7
00FA:  MOVF   00,W
00FB:  MOVWF  3E
00FC:  CLRF   47
00FD:  MOVF   3E,W
00FE:  MOVWF  48
00FF:  CALL   085
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0100:  INCF   39,F
0101:  GOTO   0F2
0102:  BCF    0A.3
0103:  BCF    0A.4
0104:  GOTO   2FC (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
0187:  DECFSZ 44,W
0188:  GOTO   18A
0189:  GOTO   18D
....................       address=LCD_LINE_TWO;
018A:  MOVLW  40
018B:  MOVWF  45
018C:  GOTO   18E
....................    else
....................       address=0;
018D:  CLRF   45
....................      
....................    address+=x-1;
018E:  MOVLW  01
018F:  SUBWF  43,W
0190:  ADDWF  45,F
....................    lcd_send_byte(0,0x80|address);
0191:  MOVF   45,W
0192:  IORLW  80
0193:  MOVWF  46
0194:  CLRF   47
0195:  MOVF   46,W
0196:  MOVWF  48
0197:  CALL   085
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0198:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0199:  MOVF   42,W
019A:  XORLW  07
019B:  BTFSC  03.2
019C:  GOTO   1A7
019D:  XORLW  0B
019E:  BTFSC  03.2
019F:  GOTO   1AC
01A0:  XORLW  06
01A1:  BTFSC  03.2
01A2:  GOTO   1B4
01A3:  XORLW  02
01A4:  BTFSC  03.2
01A5:  GOTO   1BA
01A6:  GOTO   1BF
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01A7:  MOVLW  01
01A8:  MOVWF  43
01A9:  MOVWF  44
01AA:  CALL   187
01AB:  GOTO   1C4
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01AC:  CLRF   47
01AD:  MOVLW  01
01AE:  MOVWF  48
01AF:  CALL   085
....................                      delay_ms(2);
01B0:  MOVLW  02
01B1:  MOVWF  43
01B2:  CALL   05C
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01B3:  GOTO   1C4
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
01B4:  MOVLW  01
01B5:  MOVWF  43
01B6:  MOVLW  02
01B7:  MOVWF  44
01B8:  CALL   187
01B9:  GOTO   1C4
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
01BA:  CLRF   47
01BB:  MOVLW  10
01BC:  MOVWF  48
01BD:  CALL   085
01BE:  GOTO   1C4
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
01BF:  MOVLW  01
01C0:  MOVWF  47
01C1:  MOVF   42,W
01C2:  MOVWF  48
01C3:  CALL   085
....................      #endif
....................    }
01C4:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... unsigned int16 value,cap,b,c,T0;
....................  int1 TTDC;
....................  #int_timer0
....................  void interrput_timer0(){
....................  c++;
*
004F:  INCF   31,F
0050:  BTFSC  03.2
0051:  INCF   32,F
0052:  BCF    0B.2
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   02B
....................  }
.................... void phim_up(){   
....................       if(!input(UP))
*
011A:  BSF    03.5
011B:  BSF    06.0
011C:  BCF    03.5
011D:  BTFSC  06.0
011E:  GOTO   122
....................         cap++ ;
011F:  INCF   2D,F
0120:  BTFSC  03.2
0121:  INCF   2E,F
....................        if (cap>10) cap=10;
0122:  MOVF   2E,F
0123:  BTFSS  03.2
0124:  GOTO   129
0125:  MOVF   2D,W
0126:  SUBLW  0A
0127:  BTFSC  03.0
0128:  GOTO   12C
0129:  CLRF   2E
012A:  MOVLW  0A
012B:  MOVWF  2D
012C:  BCF    0A.3
012D:  BCF    0A.4
012E:  GOTO   34B (RETURN)
.................... 
....................    }
....................   void phim_down(){   
....................       if(!input(DOWN))
012F:  BSF    03.5
0130:  BSF    06.1
0131:  BCF    03.5
0132:  BTFSC  06.1
0133:  GOTO   138
....................         cap-- ;
0134:  MOVF   2D,W
0135:  BTFSC  03.2
0136:  DECF   2E,F
0137:  DECF   2D,F
....................         if (cap<1) cap=1;
0138:  MOVF   2D,F
0139:  BTFSS  03.2
013A:  GOTO   141
013B:  MOVF   2E,F
013C:  BTFSS  03.2
013D:  GOTO   141
013E:  CLRF   2E
013F:  MOVLW  01
0140:  MOVWF  2D
0141:  BCF    0A.3
0142:  BCF    0A.4
0143:  GOTO   34C (RETURN)
....................        
....................      
....................      
....................     }
....................   void phim_start(){   
....................       if(!input(START)){
0144:  BSF    03.5
0145:  BSF    06.2
0146:  BCF    03.5
0147:  BTFSC  06.2
0148:  GOTO   15D
....................       if(!input(START)){
0149:  BSF    03.5
014A:  BSF    06.2
014B:  BCF    03.5
014C:  BTFSC  06.2
014D:  GOTO   15D
....................       while(!input(START)) {}
014E:  BSF    03.5
014F:  BSF    06.2
0150:  BCF    03.5
0151:  BTFSS  06.2
0152:  GOTO   14E
....................          TTDC=~TTDC;
0153:  MOVLW  01
0154:  XORWF  35,F
....................          if (TTDC==1) cap=1;
0155:  BTFSS  35.0
0156:  GOTO   15B
0157:  CLRF   2E
0158:  MOVLW  01
0159:  MOVWF  2D
015A:  GOTO   15D
....................          else cap=0;
015B:  CLRF   2E
015C:  CLRF   2D
....................        
....................      
....................         }
....................        }
015D:  BCF    0A.3
015E:  BCF    0A.4
015F:  GOTO   34D (RETURN)
....................      
....................   }
....................   
.................... void main(){
*
02D9:  MOVF   03,W
02DA:  ANDLW  1F
02DB:  MOVWF  03
02DC:  MOVLW  FF
02DD:  MOVWF  36
02DE:  CLRF   38
02DF:  CLRF   37
02E0:  BSF    03.5
02E1:  BSF    03.6
02E2:  MOVF   09,W
02E3:  ANDLW  C0
02E4:  MOVWF  09
02E5:  BCF    03.6
02E6:  BCF    1F.4
02E7:  BCF    1F.5
02E8:  MOVLW  00
02E9:  BSF    03.6
02EA:  MOVWF  08
02EB:  BCF    03.5
02EC:  CLRF   07
02ED:  CLRF   08
02EE:  CLRF   09
02EF:  BCF    03.7
.................... set_tris_b(0xff);
02F0:  MOVLW  FF
02F1:  BSF    03.5
02F2:  BCF    03.6
02F3:  MOVWF  06
....................    set_tris_c(0x00);
02F4:  MOVLW  00
02F5:  MOVWF  07
02F6:  BCF    03.5
02F7:  MOVWF  36
....................    set_tris_d(0x00);
02F8:  BSF    03.5
02F9:  MOVWF  08
....................    LCD_init();
02FA:  BCF    03.5
02FB:  GOTO   0C7
....................    setup_timer_0(T0_EXT_L_to_H|T0_DIV_1);
02FC:  BSF    03.5
02FD:  MOVF   01,W
02FE:  ANDLW  C7
02FF:  IORLW  28
0300:  MOVWF  01
....................    enable_interrupts(global);
0301:  MOVLW  C0
0302:  BCF    03.5
0303:  IORWF  0B,F
....................    enable_interrupts(int_timer0);
0304:  BSF    0B.5
....................   output_low(PIN_C3);
0305:  BCF    36.3
0306:  MOVF   36,W
0307:  BSF    03.5
0308:  MOVWF  07
0309:  BCF    03.5
030A:  BCF    07.3
....................   output_high(PIN_C7);
030B:  BCF    36.7
030C:  MOVF   36,W
030D:  BSF    03.5
030E:  MOVWF  07
030F:  BCF    03.5
0310:  BSF    07.7
....................   setup_CCP1(CCP_PWM);
0311:  BCF    36.2
0312:  MOVF   36,W
0313:  BSF    03.5
0314:  MOVWF  07
0315:  BCF    03.5
0316:  BCF    07.2
0317:  MOVLW  0C
0318:  MOVWF  17
0319:  BSF    03.5
031A:  CLRF   1B
031B:  CLRF   1C
031C:  MOVLW  01
031D:  MOVWF  1D
....................   setup_timer_2(T2_DIV_BY_16,249,1);
031E:  MOVLW  00
031F:  MOVWF  78
0320:  IORLW  06
0321:  BCF    03.5
0322:  MOVWF  12
0323:  MOVLW  F9
0324:  BSF    03.5
0325:  MOVWF  12
....................   set_timer2(0);
0326:  BCF    03.5
0327:  CLRF   11
....................   value =0;
0328:  CLRF   2C
0329:  CLRF   2B
....................   cap=0;
032A:  CLRF   2E
032B:  CLRF   2D
....................   TTDC=0;
032C:  BCF    35.0
....................   set_pwm1_duty(cap*100);
032D:  MOVF   2E,W
032E:  MOVWF  3A
032F:  MOVF   2D,W
0330:  MOVWF  39
0331:  CLRF   3C
0332:  MOVLW  64
0333:  MOVWF  3B
0334:  CALL   105
0335:  MOVF   79,W
0336:  MOVWF  3A
0337:  MOVF   78,W
0338:  MOVWF  39
0339:  RRF    3A,F
033A:  RRF    39,F
033B:  RRF    3A,F
033C:  RRF    39,F
033D:  RRF    3A,F
033E:  MOVF   39,W
033F:  MOVWF  15
0340:  RRF    3A,F
0341:  RRF    3A,W
0342:  ANDLW  30
0343:  MOVWF  77
0344:  MOVF   17,W
0345:  ANDLW  CF
0346:  IORWF  77,W
0347:  MOVWF  17
....................   
....................   
....................  
....................   while(1){
....................     if(TTDC==1){
0348:  BTFSS  35.0
0349:  GOTO   34C
....................     phim_up();
034A:  GOTO   11A
....................     phim_down();
034B:  GOTO   12F
....................     }
....................     phim_start();
034C:  GOTO   144
....................     value= cap*100;
034D:  MOVF   2E,W
034E:  MOVWF  3A
034F:  MOVF   2D,W
0350:  MOVWF  39
0351:  CLRF   3C
0352:  MOVLW  64
0353:  MOVWF  3B
0354:  CALL   105
0355:  MOVF   79,W
0356:  MOVWF  2C
0357:  MOVF   78,W
0358:  MOVWF  2B
....................     set_pwm1_duty(value);
0359:  MOVF   2C,W
035A:  MOVWF  79
035B:  MOVF   2B,W
035C:  MOVWF  78
035D:  RRF    79,F
035E:  RRF    78,F
035F:  RRF    79,F
0360:  RRF    78,F
0361:  RRF    79,F
0362:  MOVF   78,W
0363:  MOVWF  15
0364:  RRF    79,F
0365:  RRF    79,W
0366:  ANDLW  30
0367:  MOVWF  77
0368:  MOVF   17,W
0369:  ANDLW  CF
036A:  IORWF  77,W
036B:  MOVWF  17
....................     set_timer0(0);
036C:  CLRF   01
....................     delay_ms(500);
036D:  MOVLW  02
036E:  MOVWF  39
036F:  MOVLW  FA
0370:  MOVWF  43
0371:  CALL   05C
0372:  DECFSZ 39,F
0373:  GOTO   36F
....................     T0= get_timer0()+c*256;
0374:  MOVF   01,W
0375:  MOVWF  39
0376:  MOVF   31,W
0377:  MOVWF  7A
0378:  MOVLW  00
0379:  ADDWF  39,W
037A:  MOVWF  33
037B:  MOVF   7A,W
037C:  MOVWF  34
037D:  BTFSC  03.0
037E:  INCF   34,F
....................     c=0;
037F:  CLRF   32
0380:  CLRF   31
....................     b=(T0*120)/50;
0381:  MOVF   34,W
0382:  MOVWF  3A
0383:  MOVF   33,W
0384:  MOVWF  39
0385:  CLRF   3C
0386:  MOVLW  78
0387:  MOVWF  3B
0388:  CALL   105
0389:  MOVF   79,W
038A:  MOVWF  3A
038B:  MOVF   78,W
038C:  MOVWF  39
038D:  MOVF   79,W
038E:  MOVWF  3C
038F:  MOVF   78,W
0390:  MOVWF  3B
0391:  CLRF   3E
0392:  MOVLW  32
0393:  MOVWF  3D
0394:  GOTO   160
0395:  MOVF   79,W
0396:  MOVWF  30
0397:  MOVF   78,W
0398:  MOVWF  2F
....................     lcd_putc("\f");
0399:  MOVLW  56
039A:  BSF    03.6
039B:  MOVWF  0D
039C:  MOVLW  00
039D:  MOVWF  0F
039E:  BCF    03.6
039F:  GOTO   1C5
....................     lcd_gotoxy(1,2);
03A0:  MOVLW  01
03A1:  MOVWF  43
03A2:  MOVLW  02
03A3:  MOVWF  44
03A4:  CALL   187
....................     printf(lcd_putc,"tocdo %lu",b);
03A5:  MOVLW  57
03A6:  BSF    03.6
03A7:  MOVWF  0D
03A8:  MOVLW  00
03A9:  MOVWF  0F
03AA:  BCF    03.0
03AB:  MOVLW  06
03AC:  BCF    03.6
03AD:  MOVWF  39
03AE:  GOTO   21D
03AF:  MOVLW  10
03B0:  MOVWF  04
03B1:  MOVF   30,W
03B2:  MOVWF  3A
03B3:  MOVF   2F,W
03B4:  MOVWF  39
03B5:  CALL   276
....................     lcd_gotoxy(1,1);
03B6:  MOVLW  01
03B7:  MOVWF  43
03B8:  MOVWF  44
03B9:  CALL   187
....................     printf(lcd_putc,"cap%lu",cap);
03BA:  MOVLW  63
03BB:  MOVWF  42
03BC:  CALL   199
03BD:  MOVLW  61
03BE:  MOVWF  42
03BF:  CALL   199
03C0:  MOVLW  70
03C1:  MOVWF  42
03C2:  CALL   199
03C3:  MOVLW  10
03C4:  MOVWF  04
03C5:  MOVF   2E,W
03C6:  MOVWF  3A
03C7:  MOVF   2D,W
03C8:  MOVWF  39
03C9:  CALL   276
03CA:  GOTO   348
....................     
....................     
.................... 
....................   
....................     
....................     
....................    
....................    }
....................   }
.................... 
03CB:  SLEEP
.................... 
.................... 

Configuration Fuses:
   Word  1: 2FE7   RC NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
